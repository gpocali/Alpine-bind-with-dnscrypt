#!/bin/ash
# ISC BIND with DNScrypt Proxy Entry File

echo $(date) - Starting ISC BIND with DNScrypt Proxy

if [ ! -e /data/named.conf ]; then
    cp /etc/templates/named.conf.recursive /data/named.conf
fi

if [ ! -e /data/zones ]; then
    mkdir /data/zones
fi

if [ ! -e /data/rndc ]; then
    mkdir /data/rndc
fi

if [ ! -e /data/rndc/rndc.key ]; then
    rndc-confgen | head -n 5 > /data/rndc/rndc.key
fi

# Detect Network Names and Generate Configuration
if [ ! -e /data/names.conf.config ]; then
    IPprefix_by_netmask () { c=0 x=0$( printf '%o' ${1//./ } ); while [ $x -gt 0 ]; do let c+=$((x%2)) 'x>>=1'; done; echo -n /$c; }
    echo -e "options {
        //This file is generated automatically if it is not present during runtime
        
        directory \"/var/bind\";
        
        // Specify a list of CIDR masks which should be allowed to issue recursive
        // queries to the DNS server. Do NOT specify 0.0.0.0/0 here; see above.
        allow-recursion {
                127.0.0.1/32;
$(for i in $(route | tail -n +3 | grep -v default | awk '{print $1"-"$3}'); do echo -n "\t\t\t\t$(echo $i | cut -d"-" -f1)"; IPprefix_by_netmask $(echo $i | cut -d"-" -f2); echo ";"; done)
        };
        
        // If you have problems and are behind a firewall:
        //query-source address * port 53;
        
        include \"/tmp/listenIpAddressDetect\"; # The IP Address is automatically detected and included during run time
        
        forwarders {
            127.0.2.1; # DNScrypt Listen Address
        };
        
        pid-file \"/var/run/named/named.pid\";
        listen-on-v6 { none; }; 
        forward only;
        dnssec-validation auto;
        auth-nxdomain no;
        allow-transfer { none; };
        version none; 
    };" > /data/named.conf.config
fi

# Detect local address for listen address
echo -e "listen-on {\n$(ip addr | grep inet | grep -v inet6 | awk '{print $2}' | cut -d/ -f1 | sed 's/$/;/' | sed 's/^/\t/')\n};" > /tmp/listenIpAddressDetect

# Detect IPs for Control
if [ ! -e /data/named.conf.control ]; then
    echo -e "include \"/data/rndc/rndc.key\";\ncontrols {\n\tinet 127.0.0.1 port 953 allow {\n$(ip addr | grep inet | grep -v inet6 | awk '{print $2}' | cut -d/ -f1 | sed 's/$/;/' | sed 's/^/\t\t/')\n\t} keys { \"rndc-key\"; };\n};" > /data/named.conf.control
fi

# Generate Example Zone Files If No Zones Are Defined
if [ $( ls /data/zones | wc -l) -eq 0 ]; then
echo "\$ORIGIN .
\$TTL 604800             ; 1 week
internal           IN SOA internal. root.internal. (
        1          ; serial
        604800     ; refresh (1 week)
        86400      ; retry (1 day)
        2419200    ; expire (4 weeks)
        604800     ; minimum (1 week)
)
    NS      internal.
    A       $(ip addr | grep inet | grep $(route | grep default | awk '{print $8}') | awk '{print $2}' | cut -d/ -f1)

\$ORIGIN internal.
\$TTL 600
router  A       $(route | grep default | awk '{print $2}')
" > /data/zones/internal

echo "\$ORIGIN .
\$TTL 604800     ; 1 week
$(ip addr | grep inet | grep $(route | grep default | awk '{print $8}') | awk '{print $2}' | cut -d/ -f1 | awk -F"." '{print $3"."$2"."$1}').in-addr.arpa           IN SOA  internal. root.internal. (
        1          ; serial
        604800     ; refresh (1 week)
        86400      ; retry (1 day)
        2419200    ; expire (4 weeks)
        604800     ; minimum (1 week)
)
    NS      internal.
    A       $(ip addr | grep inet | grep $(route | grep default | awk '{print $8}') | awk '{print $2}' | cut -d/ -f1)

\$ORIGIN $(ip addr | grep inet | grep $(route | grep default | awk '{print $8}') | awk '{print $2}' | cut -d/ -f1 | awk -F"." '{print $3"."$2"."$1}').in-addr.arpa.
\$TTL 600       ;

$(route | grep default | awk '{print $2}' | cut -d. -f4)    PTR    router.internal.
" > /data/zones/$(ip addr | grep inet | grep $(route | grep default | awk '{print $8}') | awk '{print $2}' | cut -d/ -f1 | awk -F"." '{print $3"."$2"."$1}').in-addr.arpa

fi

echo "" > /tmp/named.conf.zones
badZone=0
for name in $(ls /data/zones); do 
    named-checkzone $(cat /data/zones/$name | grep SOA | grep IN | grep "(" | awk '{print $1'}) /data/zones/$name
    if [ $? -ne 0 ]; then 
        echo Zone $name configuration error.
        badZone=1
    else
        if [ $(echo $name | grep "in-addr.arpa" | wc -l) -eq 1 ]; then
            echo "zone \"$name\" {
  type master;
  notify no;
  file \"/data/zones/$name\";
  allow-update { key rndc-key; };
};
" >> /tmp/named.conf.zones
        else
            echo "zone \"$name\" {
  type master;
  file \"/data/zones/$name\";
  allow-update { key rndc-key; };
};
" >> /tmp/named.conf.zones
            if [ $(grep internal /data/zones/* | grep "in-addr.arpa" | wc -l) -eq 0 ]; then
                echo "Warning: Zone '$name' does not have a reverse lookup zone defined."
            fi
        fi
    fi
done
if [ $badZone -eq 1 ]; then
    echo There are errors in your zone configuration files.  Startup aborted.
    exit 1
fi

if [ ! -e /data/named.conf.zones ]; then
    cp /tmp/named.conf.zones /data/named.conf.zones
fi


if [ ! -e /data/log/ ]; then
    mkdir /data/log/
fi
echo "logging {
    channel querylog {
        file \"/data/log/bind-querylog.log\";
        severity debug 1;
    };
};" > /tmp/named.conf.logging

/usr/sbin/named-checkconf /data/named.conf
if [ $? -eq 0 ]; then
    echo Configuration check successful.
else
    echo Configuration check failed. Startup aborted.
    exit 1
fi

if [ ! -e /data/dnscrypt-proxy.toml ]; then
    cp /etc/templates/dnscrypt-proxy.toml /data/dnscrypt-proxy.toml
fi

/usr/bin/dnscrypt-proxy -config /data/dnscrypt-proxy.toml -check
if [ $? -eq 0 ]; then
    echo Configuration check successful.
else
    echo Configuration check failed. Startup aborted.
    exit 1
fi

# Launch
/usr/bin/dnscrypt-proxy -config /data/dnscrypt-proxy.toml &

/usr/sbin/named -c /data/named.conf -f -g

exit 0
